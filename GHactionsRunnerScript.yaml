AWSTemplateFormatVersion: 2010-09-09
Description: Create a VPC, private subnet, EC2 Linux instance, IAM role and instance profile, 
   DynamoDB table and S3 bucket to host initials github runneras to deploy infra.

Parameters:
  Environment:
    Type: String
    Description: Environment to be used for. (Only lowercase)
    Default: dev1
  GithubOrganization:
    Type: String
    Description: Github Organization where runner will set up
    Default: COMPANY
  RunnersVersion:
    Type: String
    Description: Runner version.
    Default: "2.311.0"
  RunnersTokens:
    Type: String
    Description: Tokens to use in each repo to set up new runner in Github repository.
    Default: "'[{\"DevOps-Infrastructure-Apps\":\"token\"},{\"DevOps-Shared-Resources\":\"token\"},{\"DevOps-Base-Infrastructure\":\"token\"},{\"DevOps-Tools\":\"token\"},{\"DevOps-Secrets-Management\":\"token\"},{\"DevOps-Infrastructure-DataBases\":\"token\"}]'"
  AMIId:
    Type: String
    Default: "ami-0230bd60aa48260c6"
    Description: The Amazon Machine Image (AMI) ID for the EC2 instance - Should be amazon Linux.
    AllowedPattern: "ami-[0-9a-f]{8,17}"
    ConstraintDescription: Must be a valid AMI ID starting with "ami-".
  EBSVolumeSize:
    Type: Number
    Description: The size of the EBS volume in GiB.
    Default: 15
    MinValue: 1
    MaxValue: 16384
    ConstraintDescription: Must be between 1 and 16,384 GiB.

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub "Main-Runners-${Environment}"
        - Key: map-migrated
          Value: mig47QIGQKVNN

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: IGW-Main-Runners
        - Key: map-migrated
          Value: mig47QIGQKVNN

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "Main-Runners-${Environment} Public Subnet (AZ1)"
        - Key: map-migrated
          Value: mig47QIGQKVNN

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "Main-Runners-${Environment} Public Routes"

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1
  
  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "MainRunnersTable-${Environment}"
      AttributeDefinitions:
        - AttributeName: runnerId
          AttributeType: S
      KeySchema:
        - AttributeName: runnerId
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      Tags:
        - Key: map-migrated
          Value: mig47QIGQKVNN
      
  WebServerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable HTTP from 0.0.0.0/0
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VPC 
      Tags:
        - Key: map-migrated
          Value: mig47QIGQKVNN
  
  MainRunnersInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      InstanceProfileName: !Sub "main-runner-instance-profile-${Environment}"
      Path: /
      Roles: 
        - !Ref MainRunnersRole

  MainRunnersRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "main-runners-rol-${Environment}"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Tags:
        - Key: map-migrated
          Value: mig47QIGQKVNN

  MainRunnersPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: MainRunnersPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - ec2:DescribeIamInstanceProfileAssociations
              - ec2:DescribeSecurityGroups
              - ec2:DescribeSubnets
              - ec2:DescribeVolumes
              - ec2:DescribeInstanceCreditSpecifications
              - ec2:DescribeInstanceAttribute
              - ec2:DescribeVpcs
              - ec2:DescribeInstances
              - ec2:DescribeInstanceTypes
              - ec2:StartInstances
              - ec2:ModifyInstanceAttribute
              - ec2:StopInstances
              - ec2:ReplaceIamInstanceProfileAssociation
              - ec2:DescribeRouteTables
              - ec2:RunInstances
              - ec2:DescribeImages
              - ec2:TerminateInstances
              - ec2:DescribeVpcAttribute
              - ec2:DescribeNetworkAcls
              - ec2:DescribeNatGateways
              - ec2:DescribeInternetGateways
              - ec2:DescribeAddresses
              - ec2:RevokeSecurityGroupEgress
              - ec2:AuthorizeSecurityGroupIngress
              - ec2:AuthorizeSecurityGroupEgress
              - ec2:CreateSecurityGroup
              - ec2:DescribeNetworkInterfaces
              - ec2:DeleteSecurityGroup
              - ec2:CreateSubnet
              - ec2:AssociateRouteTable
              - ec2:DescribeKeyPairs
              - ec2:DescribeAccountAttributes
              - ec2:CreateNetworkInterface
              - ec2:CreateRoute
              - ec2:CreateNatGateway
              - ec2:ModifySubnetAttribute
              - ec2:AttachInternetGateway
              - ec2:AllocateAddress
              - ec2:CreateRouteTable
              - ec2:CreateInternetGateway
              - ec2:ModifyVpcAttribute
              - ec2:CreateVpc
            Resource: "*"
          - Effect: Allow
            Action:
              - route53:ListResourceRecordSets
              - route53:GetHostedZone
              - route53:GetChange
              - route53:ChangeResourceRecordSets
              - route53:CreateHostedZone
            Resource: "*"
          - Effect: Allow
            Action:
              - lambda:ListVersionsByFunction
              - lambda:GetFunctionCodeSigningConfig
              - lambda:GetFunction
              - lambda:UpdateFunctionCode
              - lambda:UpdateFunctionConfiguration
              - lambda:DeleteFunction
              - lambda:CreateFunction
            Resource: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:*-${Environment}*"
          - Effect: Allow
            Action:
              - iam:GetRole
              - iam:GetInstanceProfile
              - iam:AddRoleToInstanceProfile
              - iam:RemoveRoleFromInstanceProfile
              - iam:DeleteInstanceProfile
              - iam:CreateInstanceProfile
              - iam:ListAttachedRolePolicies
              - iam:GetPolicyVersion
              - iam:ListRolePolicies
              - iam:GetPolicy
              - iam:CreatePolicy
              - iam:AttachRolePolicy
              - iam:DetachRolePolicy
              - iam:DeletePolicy
              - iam:ListPolicyVersions
              - iam:DeletePolicyVersion
              - iam:CreatePolicyVersion
              - iam:CreateRole
            Resource: "*"
          - Effect: Allow
            Action:
              - elasticloadbalancing:DescribeTargetHealth
              - elasticloadbalancing:DescribeRules
              - elasticloadbalancing:DescribeTargetGroupAttributes
              - elasticloadbalancing:DescribeLoadBalancers
              - elasticloadbalancing:DescribeLoadBalancerAttributes
              - elasticloadbalancing:DescribeListeners
              - elasticloadbalancing:DescribeTargetGroups
              - elasticloadbalancing:RegisterTargets
              - elasticloadbalancing:CreateRule
              - elasticloadbalancing:CreateListener
              - elasticloadbalancing:DeregisterTargets
              - elasticloadbalancing:DeleteRule
              - elasticloadbalancing:DeleteListener
              - elasticloadbalancing:SetSecurityGroups
              - elasticloadbalancing:SetIpAddressType
              - elasticloadbalancing:ModifyLoadBalancerAttributes
              - elasticloadbalancing:CreateLoadBalancer
              - elasticloadbalancing:ModifyTargetGroupAttributes
              - elasticloadbalancing:CreateTargetGroup
            Resource: "*"
          - Effect: Allow
            Action:
              - ssm:DescribeAssociation
              - ssm:GetDeployablePatchSnapshotForInstance
              - ssm:GetDocument
              - ssm:DescribeDocument
              - ssm:GetManifest
              - ssm:GetParameter
              - ssm:GetParameters
              - ssm:ListAssociations
              - ssm:ListInstanceAssociations
              - ssm:PutInventory
              - ssm:PutComplianceItems
              - ssm:PutConfigurePackageResult
              - ssm:UpdateAssociationStatus
              - ssm:UpdateInstanceAssociationStatus
              - ssm:UpdateInstanceInformation
              - ssm:ListInstanceInventory
              - ssm:ListResourceComplianceSummaries
              - ssm:ListResourceDataSync
              - ssm:SyncInventory
              - ssm:SendCommand
              - ssm:ReceiveCommand
              - ssm:SendAutomationSignal
              - ssm:StartAutomationExecution
              - ssm:StartSession
            Resource: "*"
          - Effect: Allow
            Action:
              - ds:DescribeDirectories
              - ds:CreateMicrosoftAD
            Resource: "*"
          - Effect: Allow
            Action:
              - secretsmanager:PutSecretValue
              - secretsmanager:GetSecretValue
              - secretsmanager:GetResourcePolicy
              - secretsmanager:DescribeSecret
              - secretsmanager:CreateSecret
              - secretsmanager:DeleteSecret
            Resource: !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:*-${Environment}*"
          - Effect: Allow
            Action:
              - codeartifact:DescribeRepository
              - codeartifact:DescribeDomain
              - codeartifact:CreateRepository
              - codeartifact:DeleteRepository
              - codeartifact:AssociateExternalConnection
              - codeartifact:CreateDomain
            Resource: "*"
      Roles:
        - !Ref MainRunnersRole

  TerraformS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "devops-COMPANY-terraform-${Environment}"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: map-migrated
          Value: mig47QIGQKVNN

  DevopsKeyPair:
    Type: 'AWS::EC2::KeyPair'
    Properties:
      KeyName: !Sub "DevopsKey-${Environment}"
      Tags:
          - Key: map-migrated
            Value: mig47QIGQKVNN
          - Key: Description
            Value: For DevOps tools as runners instances. Key stored in parameter store with KeyID

  WebServersKeyPair:
    Type: 'AWS::EC2::KeyPair'
    Properties:
      KeyName: !Sub "WebServersKey-${Environment}"
      Tags:
          - Key: map-migrated
            Value: mig47QIGQKVNN
          - Key: Description
            Value: For IIS Web servers. Key stored in parameter store with KeyID

  DataBasesKeyPair:
    Type: 'AWS::EC2::KeyPair'
    Properties:
      KeyName: !Sub "DataBasesKey-${Environment}"
      Tags:
          - Key: map-migrated
            Value: mig47QIGQKVNN
          - Key: Description
            Value: For DataBases servers. Key stored in parameter store with KeyID

  FERunnerDeploySCP:
    Type: 'AWS::EC2::KeyPair'
    Properties:
      KeyName: !Sub "FERunnerDeploySCPKey-${Environment}"
      Tags:
          - Key: map-migrated
            Value: mig47QIGQKVNN
          - Key: Description
            Value: For FE Deploy runner to PSCP. Key stored in parameter store with KeyID
      KeyFormat: ppk

  BERunnerDeploySCP:
    Type: 'AWS::EC2::KeyPair'
    Properties:
      KeyName: !Sub "BERunnerDeploySCPKey-${Environment}"
      Tags:
          - Key: map-migrated
            Value: mig47QIGQKVNN
          - Key: Description
            Value: For BE Deploy runner to PSCP. Key stored in parameter store with KeyID
      KeyFormat: ppk
      
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      # Image should be amazon linux latest.
      ImageId: !Ref AMIId
      InstanceType: t3.large
      SubnetId: !Ref PublicSubnet1
      KeyName: !Ref DevopsKeyPair
      IamInstanceProfile: !Ref MainRunnersInstanceProfile
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: !Ref EBSVolumeSize
            VolumeType: gp2
            DeleteOnTermination: true
      SecurityGroupIds: 
        - !Ref WebServerSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub "Main-Runners-${Environment} EC2"
        - Key: map-migrated
          Value: mig47QIGQKVNN 
      UserData:
        Fn::Base64: 
          !Sub |
            #!/bin/bash -xe
            LOG_FILE="/var/log/user-data.log"
            exec > >(tee $LOG_FILE | logger -t user-data -s 2>/dev/console) 2>&1

            # Function to log an error message and exit
            error_exit() {
              echo "$1" 1>&2
              echo "$1" >> $LOG_FILE
              exit 1
            }

            # Ensure /home/runner exists and has the correct permissions
            if ! id "runner" &>/dev/null; then
              if ! useradd -m -d /home/runner runner; then
                error_exit "Failed to create user 'runner'."
              fi
            fi
            if ! mkdir -p /home/runner || ! chown runner:runner /home/runner; then
              error_exit "Failed to ensure /home/runner exists and has correct permissions."
            fi

            # Update the system
            if ! yum update -y; then
              error_exit "Failed to update system."
            fi

            # Install required packages
            if ! yum install -y openssl yum-utils jq; then
              error_exit "Failed to install required packages."
            fi

            # Install Terraform
            if ! yum-config-manager --add-repo https://rpm.releases.hashicorp.com/AmazonLinux/hashicorp.repo || ! yum -y install terraform; then
              error_exit "Failed to install Terraform."
            fi

            # Install Git
            if ! yum install -y git; then
              error_exit "Failed to install Git."
            fi

            # Install .NET Core dependencies
            if ! rpm -Uvh https://packages.microsoft.com/config/centos/7/packages-microsoft-prod.rpm || ! yum install -y dotnet-sdk-3.1; then
              error_exit "Failed to install .NET SDK."
            fi

            # Add the runner user to the wheel group if not already a member
            if ! groups runner | grep -qw "wheel"; then
              if ! usermod -aG wheel runner; then
                error_exit "Failed to add 'runner' user to wheel group."
              fi
            fi

            # Install the SSM agent
            if ! yum install -y amazon-ssm-agent; then
              error_exit "Failed to install the SSM agent."
            fi

            # Enable and start the SSM agent service
            if ! systemctl enable amazon-ssm-agent; then
              error_exit "Failed to enable the SSM agent service."
            fi
            if ! systemctl start amazon-ssm-agent; then
              error_exit "Failed to start the SSM agent service."
            fi

            # Create a main runners folder
            usrDirectory="/home/runner"
            if ! mkdir -p "$usrDirectory/actions-runner"; then
              error_exit "Failed to create actions-runner directory."
            fi
            if ! cd "$usrDirectory/actions-runner"; then
              error_exit "Failed to change directory to actions-runner."
            fi

            # Download the latest runner package
            if ! curl -o actions-runner-linux-x64-${RunnersVersion}.tar.gz -L "https://github.com/actions/runner/releases/download/v${RunnersVersion}/actions-runner-linux-x64-${RunnersVersion}.tar.gz"; then
              error_exit "Failed to download actions runner package."
            fi

            RunnerLabel="lnx-tf-${Environment}"

            echo "${RunnersTokens}"
            ########### Loop over runnerTokens Json ###########
            ###################################################
            echo ${RunnersTokens} | jq -c '.[]' | while IFS= read -r element; do
              # Extract key and value using jq
              RepoName=$(echo "$element" | jq -r 'keys_unsorted[0]')
              tempToken=$(echo "$element" | jq -r '.[keys_unsorted[0]]')

              # Print key and value
              echo "Key: $RepoName, Value: $tempToken"

              RunnerName="tf-$RepoName-${Environment}"
              if ! mkdir -p $RepoName; then
                error_exit "Failed to create directory for $RepoName."
              fi
              # Extract the installer to folder
              if ! tar xzf ./actions-runner-linux-x64-${RunnersVersion}.tar.gz -C ./$RepoName; then
                error_exit "Failed to extract runner package for $RepoName."
              fi
              # Configure and install as a service
              chmod -R 755 .
              (RUNNER_ALLOW_RUNASROOT=true ./$RepoName/config.sh --unattended --url "https://github.com/${GithubOrganization}/$RepoName" --token $tempToken --name $RunnerName --work _work --runnergroup Default --labels $RunnerLabel >> $LOG_FILE 2>&1) || echo "Failed to configure runner for $RepoName, continuing..."
              pushd $RepoName
              (./svc.sh install >> $LOG_FILE 2>&1) || echo "Failed to install runner service for $RepoName, continuing..."
              (./svc.sh start >> $LOG_FILE 2>&1) || echo "Failed to start runner service for $RepoName, continuing..."
              chmod -R 755 _diag
              (./svc.sh status >> $LOG_FILE 2>&1) || echo "Failed to get status for runner service for $RepoName, continuing..."
              popd || echo "Failed to return to previous directory, continuing..."

            done || echo "Failed to configure runners, continuing..."

            echo "FINISHED"
            ####################################################
            ###################################################
Outputs:
  PublicIp:
    Description: EC2 Instance Public Ip
    Value: !GetAtt EC2Instance.PublicIp
  S3TerrafomBucket:
    Description: S3 buckets for Terraform
    Value: !Ref TerraformS3Bucket
  DevopsKeyPair:
    Description: For DevOps tools as runners instances
    Value: !GetAtt DevopsKeyPair.KeyPairId
  WebServersKeyPair:
    Description: For IIS Web servers
    Value: !GetAtt WebServersKeyPair.KeyPairId
  DataBasesKeyPair:
    Description: For DataBases servers
    Value: !GetAtt DataBasesKeyPair.KeyPairId
  FERunnerDeploySCP:
    Description: For FE Deploy runner to PSCP
    Value: !GetAtt FERunnerDeploySCP.KeyPairId
  BERunnerDeploySCP:
    Description: For BE Deploy runner to PSCP
    Value: !GetAtt BERunnerDeploySCP.KeyPairId
  VpcId:
    Description: The ID from the deployed VPC
    Value: !GetAtt VPC.VpcId